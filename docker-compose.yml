version: "3.10"

# networks:
#   roachnet:
#     driver: bridge

services:
  ###################### cockroach ######################
  # roach1:
  #   image: cockroachdb/cockroach:latest
  #   container_name: roach1
  #   hostname: roach1
  #   restart: unless-stopped

  #   # joins node with the others creating a cluster
  #   command: start --advertise-addr=roach1:26357 --http-addr=roach1:8080 --listen-addr=roach1:26357 --sql-addr=roach1:26257 --insecure --join=roach1:26357,roach2:26357,roach3:26357
  #   # command: start --advertise-addr=roach1 --http-addr=roach1 --listen-addr=roach1 --sql-addr=roach1 --insecure --join=roach1,roach2,roach3
  #   networks:
  #     - roachnet
  #   ports:
  #     - "26257:26257"
  #     - "8080:8080"
  #   # volumes:
  #   #   - roach1:/cockroach/cockroach-data


  # roach2:
  #   image: cockroachdb/cockroach:latest
  #   container_name: roach2
  #   hostname: roach2
  #   restart: unless-stopped

  #   # joins node with the others creating a cluster
  #   command: start --advertise-addr=roach2:26357 --http-addr=roach2:8081 --listen-addr=roach2:26357 --sql-addr=roach2:26258 --insecure --join=roach1:26357,roach2:26357,roach3:26357
  #   # command: start --advertise-addr=roach2 --http-addr=roach2 --listen-addr=roach2 --sql-addr=roach2 --insecure --join=roach1,roach2,roach3
  #   networks:
  #     - roachnet
  #   ports:
  #     - "26258:26258"
  #     - "8081:8081"
  #   # volumes:
  #   #   - roach2:/cockroach/cockroach-data
  

  # roach3:
  #   image: cockroachdb/cockroach:latest
  #   container_name: roach3
  #   hostname: roach3
  #   restart: unless-stopped
  #   # joins node with the others creating a cluster &&
  #   command: start --advertise-addr=roach3:26357 --http-addr=roach3:8082 --listen-addr=roach3:26357 --sql-addr=roach3:26259 --insecure --join=roach1:26357,roach2:26357,roach3:26357
  #   # command: start --advertise-addr=roach3 --http-addr=roach3 --listen-addr=roach3 --sql-addr=roach3 --insecure --join=roach1,roach2,roach3
  #   networks:
  #     - roachnet
  #   ports:
  #     - "26259:26259"
  #     - "8082:8082"

  gql_ug:
    image: gql_ug
    build:
      # context definuje cestu k popisu
      context: ./
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - DEMO=true
      - GQL_PROXY=http://apollo:3000/api/gql/
    depends_on:
      # kontejnery, ktere musi byt spusteny drive
      - postgres
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    volumes:
      - ./_extradata:/app/extradata
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
      - 31120:8000
  
  postgres:
    image: postgres
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 60s
      timeout: 10s
      retries: 5
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports:
      - 5432:5432

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      # promenne, ktere lze cist v kontejneru
      - PGADMIN_DEFAULT_EMAIL=anoyne@anywhere.com
      - PGADMIN_DEFAULT_PASSWORD=example
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 60s
      timeout: 10s
      retries: 5
    ports:
      - 31122:80

  # nginx: # funguje jako proxy mezi vnejskem a vnitrkem, tudy tece cela HTTP komunikace
  #   build:
  #     # context definuje cestu k popisu
  #     context: ./nginx
  #   restart: always
  #   ports:
  #     # vnejsi port : port, kde sluzbu poskytuje kontejner
  #     - 31180:80
  #   depends_on:
  #     # kontejnery, kter musi byt spusteny drive
  #     - postgres
